// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: messages.proto

package railway_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RailwayClient is the client API for Railway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RailwayClient interface {
	GetRailwayState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RailwayState, error)
	GetTrain(ctx context.Context, in *Train, opts ...grpc.CallOption) (*Train, error)
}

type railwayClient struct {
	cc grpc.ClientConnInterface
}

func NewRailwayClient(cc grpc.ClientConnInterface) RailwayClient {
	return &railwayClient{cc}
}

func (c *railwayClient) GetRailwayState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RailwayState, error) {
	out := new(RailwayState)
	err := c.cc.Invoke(ctx, "/GRPCRailway.Railway/GetRailwayState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *railwayClient) GetTrain(ctx context.Context, in *Train, opts ...grpc.CallOption) (*Train, error) {
	out := new(Train)
	err := c.cc.Invoke(ctx, "/GRPCRailway.Railway/GetTrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RailwayServer is the server API for Railway service.
// All implementations must embed UnimplementedRailwayServer
// for forward compatibility
type RailwayServer interface {
	GetRailwayState(context.Context, *Empty) (*RailwayState, error)
	GetTrain(context.Context, *Train) (*Train, error)
	mustEmbedUnimplementedRailwayServer()
}

// UnimplementedRailwayServer must be embedded to have forward compatible implementations.
type UnimplementedRailwayServer struct {
}

func (UnimplementedRailwayServer) GetRailwayState(context.Context, *Empty) (*RailwayState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRailwayState not implemented")
}
func (UnimplementedRailwayServer) GetTrain(context.Context, *Train) (*Train, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrain not implemented")
}
func (UnimplementedRailwayServer) mustEmbedUnimplementedRailwayServer() {}

// UnsafeRailwayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RailwayServer will
// result in compilation errors.
type UnsafeRailwayServer interface {
	mustEmbedUnimplementedRailwayServer()
}

func RegisterRailwayServer(s grpc.ServiceRegistrar, srv RailwayServer) {
	s.RegisterService(&Railway_ServiceDesc, srv)
}

func _Railway_GetRailwayState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RailwayServer).GetRailwayState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GRPCRailway.Railway/GetRailwayState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RailwayServer).GetRailwayState(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Railway_GetTrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Train)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RailwayServer).GetTrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GRPCRailway.Railway/GetTrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RailwayServer).GetTrain(ctx, req.(*Train))
	}
	return interceptor(ctx, in, info, handler)
}

// Railway_ServiceDesc is the grpc.ServiceDesc for Railway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Railway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GRPCRailway.Railway",
	HandlerType: (*RailwayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRailwayState",
			Handler:    _Railway_GetRailwayState_Handler,
		},
		{
			MethodName: "GetTrain",
			Handler:    _Railway_GetTrain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages.proto",
}
